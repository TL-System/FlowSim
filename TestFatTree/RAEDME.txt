=== Simulator Description ===

This is a set of files to test the simulator under a fat-tree topology.
The routing method is ECMP specific for fat-tree topology.
The flows are generated by GenFlowInput.py into the fat_tree_K_flows.txt.
The TestFlowScheduler.py is used to assigned flows by reading from fat_tree_K_flows.txt.
The TestSimulator.py is the main file to do the initialization and launch the simulator.


=== GenFlowInput.py ===

This file is used to generate flows for the fat-tree topology.
Paras:
    K: the port number of each switch in fat-tree. Also known as the scale of a fat-tree
    flowSize: the size of each flow. Here each flow is in the same size with MB
    mean: the expected value of poisson arrival rate. The average number of flows started in one second.
    avgFlowNum: the average number of each server launching flows.
The result is written into Input/K_S_L_a_flows.txt.
You should know what does the file name mean according to the parameters above.

The destination Id for each flow is randomly selected in range of all the servers.

Note: there is a file InputGenerator.py iteratively called GenFlowInput.py to generate input files.


=== TestFlowScheduler.py ===

This file is reading the input files from Input/ and assigns the flows to used.
It inherits the base class FlowScheduler in Src/ and rewrites the member method AssignFlows().
The input parameters for AssignFlows() is a tuple with the same params as GenFlowInput.py.
Note that the AssignFlows() in base class FlowScheduler is an interface and only has a parameter args.
It rewrites the PrintFlows() to print flow transferring time and throughput into Ouput/.


=== TestSimulator.py ===

In the main function, it is clearly showing the process to start the simulator:
1. Assign the topology.
2. Assign the routing engine.
3. Assign the flow scheduler and args for the scheduler.AssignFlows()
4. Run.

Note: there is a file Runner.py iteratively called TestSimulator.py to run the simulator.

